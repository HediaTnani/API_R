---
title: "Getting Started with API in R"
author: "Hedia Tnani"
format: revealjs
editor: visual
---

# Getting started with API in R

## Why should I learn about APIs?

For the past 2 years, many groups have been working on creating APIs that the entire research community can leverage. There's a a publication [A Review on Genomics APIs](https://www.sciencedirect.com/science/article/pii/S2001037015000471#f0015) which shows some of the APIs used to retrieve data such as Google Genomics API and 23andMe API.

## What is an API?

**API** stands for **Application Programming Interface.**

An API acts as interface between two applications (Client and sever).

## How?

Let's take a non technical example to make it to understand.

![](images/API1.jpeg)

[Source](https://dev.to/hackthisfall/what-is-api-explained-in-easy-way-5aih)

The **Customer(application)** will send a **request**, the **waiter(API)** will take our request and send it to the **chef(server).** The **chef(server)** takes action according to our request and send it back to the waiter(API).

## Example : 23andMe API

An example from the 23andMe API.

![](images/23andme.png)

[Source](https://www.sciencedirect.com/science/article/pii/S2001037015000471#s0020)

## Making API requests in R

To work with APIs in R, we need to bring in two libraries `httr` and `jsonlite`. 

### 1. Preparing the URL

### **What is an URL?**

The **Uniform Resource Locator or URL** is a string (of characters) that uniquely identifies a web resource.

## Ensembl URL

For example, "https://rest.ensembl.org" is the URL that identifies Ensembl's homepage. The URL is the input of any API request. It consists of two parts: - The fixed part: base URL --- the base URL is the main address of the API web server - The variable part: endpoint --- an endpoint is a server route for retrieving specific data from an API.

## **What is an API endpoint?**

API endpoints are the specific digital location where requests for information are sent by one program to retrieve the digital resource that exists there. **Endpoints specify where APIs can access resources and help guarantee the proper functioning of the incorporated software**. An API's performance depends on its capacity to successfully communicate with API endpoints.

## Preparing the URL in R

Example:

[Ensembl REST API Endpoints](https://rest.ensembl.org)

Let's load the `library(httr)`. The `modify_url()` allows us to combine base URLs and endpoints.

```{r}
library(httr)
# Preparing the URL 
baseurl <- "https://rest.ensembl.org"
ext <- "/sequence/id/ENSG00000157764"
url <- modify_url(baseurl, path = ext)
url
```

## Querying the database

### 2. Querying the database

APIs use **HTTP verbs** for data requests. One of the most common is a **GET** request. The GET request asks the API to ***retrieve*** a resource, such as a database record or the contents of a file, and send it to the client. To make a GET request we´ll be using the **`GET()` function** from the `httr` package.

```{r}
response = GET(url)
response
```

## The API response

The API response contains, among other information, the query URL and date, the response status, and the content type and size. It might also include the content itself, but this part isn't visible here.

The Content-Type of the API response is an `application/json`.

JSON stands for **JavaScript Object Notation.**

## Tracking Errors

When making queries, it's entirely possible that the output isn't the right type or that something will go wrong . Therefore, it's important to track these errors. Web servers return status codes every time they receive an API request. A status code reports what happened with a request.

## Getting the API response

One very useful function to use is content which **extract content from a request. For that** we use **`content()`** from the `httr` package to extract this content.

```{r}
#| output: false

library(httr)
# automatically parses JSON
APIResult = content(response)
#APIResult$seq
```

## Converting the response into a dataframe

Let's get all microarrays available for a given species. In R, we can parse this JSON string and convert it into a DataFrame using the `fromJSON()` from the `jsonlite` package. If the output of an endpoint contains a list, R will happily get all items in a list without the need for any loops. The `fromJSON` needs as an argument a JSON string, URL or file. To make it a JSON string we convert it to text.
